[[!tag surveillance internet tunisia]]

Before the [Freedom Online Conference](http://www.freedomonline.tn/) in Tunis, I was at the [Tunisian Internet Agency](https://en.wikipedia.org/wiki/Tunisian_Internet_Agency) ([ATI](http://www.ati.tn)) to investigate some of the internet surveillance devices used by the Ben Ali regime. The ATI used to be the unique interconnexion point of the country with the outer internet and thus hosted most devices used for regime surveillance and its [associated repression](http://jilliancyork.com/2011/01/06/tunisian-blogger-slim-amamou-arrested/).

We studied former regime's transparent Web proxies: they intercept HTTP traffic, monitor requests, block some and alter some. During the workshop they were configured to locally reproduce their role in the country-wide interception performed between 2004 and 2007 (in recent years, more modern devices have been used for monitoring). I give here details I have on the configuration, basic methods I learnt for detecting such devices from the inside and some instructions to reproduce the setup at home.

[[!img images/ammar3-13.jpg alt="The bottom machine is the NetCache appliance (source: thd.tn)" caption="The bottom machine is the NetCache appliance (source: thd.tn)"]]

[[!more linktext="Read full article..." text="""

# Interception setup
It is a classical HTTP interception setup: all traffic coming from inside Tunisia with a destination TCP port of 80 or 8080 was diverted to a monitoring/filtering proxy by a router.

    inside Tunisia ---> router: TCP 80 or 8080? --[no]--> outside internet
                                        |                       ^
                                      [yes]                     |
                                        |                       |
                                        v                       |
                               filtering/monitoring proxy ------+

The devices (sleeping in the ATI since Ben Ali) are a Cisco machine for the router part and several NetApp NetCache C6200 appliances for the filtering/monitoring proxy part. The redirection from the Cisco router to the NetCache appliances was done using [WCCP](https://en.wikipedia.org/wiki/Web_Cache_Communication_Protocol). An ATI staff member told us that the NetCaches were monitored and configured remotely from the Interior Ministry and the Presidency while being physically hosted at the ATI.

[This kind of setup](https://en.wikipedia.org/wiki/Proxy_server#Transparent_proxy) is easy to put in place even without dedicated hardware: generic GNU/Linux computers can handle both the router and proxy parts with free and open-source software.

The challenge is rather to ensure enough throughput for a whole country. Some companies are very good at it, manufacturing and selling appliances that efficiently help governments to keep their people "under control". Blue Coat - which since then [bought the NetCache business from NetApp](http://www.theregister.co.uk/2006/06/23/netapp_sells_netcache/) - are [quite good at this](http://reflets.info/bluecoats-role-in-syrian-censorship-and-nationwide-monitoring-system/) but are far from being the only ones. Similar massive surveillance setups run in many countries with the help of western companies, like in Syria and Turkey. Internet service providers in so-called democratic countries do run such configurations too.

Transparent Web proxies for cleartext traffic is only a subset of the internet monitoring performed under Ben Ali, which additionally included the much more perverse [man-in-the-middle attack on SSL connections with the help of Microsoft](https://en.wikipedia.org/wiki/Microsoft_Tunisia_Scandal#Citizen_Surveillance_and_Hacking).

# Network interference detection from inside
The idea is to detect the abovementioned setup when you are subject to it, like Tunisians under Ben Ali. While hard to see with only a browser, it perturbates the network traffic quite heavily and [its detection is quite easy and documented](https://en.wikipedia.org/wiki/Proxy_server#Detection), so I will simply give details on one method we experimentated during the workshop.

Using the [tcptraceroute](http://linux.die.net/man/1/tcptraceroute) tool to observe the path taken by TCP packets from the inside to an outside host, the interference appears quickly. This command is simply a traceroute which uses TCP packets. It is useful in our case because the interference is happening on a couple of TCP ports (80 and 8080).

A first run tracing the path on port 22 from the inside to the French IP 88.191.132.173 (this blog) gives the following output:

    # tcptraceroute -n 88.191.132.173 22
    Tracing the path to 88.191.132.173 on TCP port 22 (ssh), 30 hops max
     1  41.231.22.225  1.990 ms  1.682 ms  1.638 ms
     2  41.231.22.65  3.507 ms  2.946 ms  4.071 ms
     3  193.95.1.9  2.370 ms  1.975 ms  1.807 ms
     4  213.242.116.5  42.846 ms  134.883 ms  42.768 ms
     5  4.69.143.238  45.787 ms  45.943 ms  45.830 ms
     6  4.69.143.109  44.506 ms  48.923 ms  45.034 ms
     7  4.69.153.126  45.825 ms  44.988 ms  44.248 ms
     8  4.69.166.130  45.965 ms  62.066 ms  46.742 ms
     9  130.117.14.197  46.414 ms  46.527 ms  46.682 ms
    10  130.117.0.238  48.097 ms  47.972 ms  48.118 ms
    11  130.117.50.10  47.940 ms  47.905 ms  48.016 ms
    12  130.117.50.69  47.729 ms  46.411 ms  46.876 ms
    13  149.6.115.6  53.580 ms  56.251 ms  53.314 ms
    14  212.27.59.101  45.361 ms  45.452 ms  46.039 ms
    15  212.27.50.162  55.321 ms  53.997 ms  49.477 ms
    16  88.191.1.131  49.219 ms  49.019 ms  60.566 ms
    17  88.191.1.133  46.526 ms  48.875 ms  46.077 ms
    18  88.191.1.150  45.919 ms  47.739 ms  46.342 ms
    19  88.191.132.173 [open]  45.558 ms  46.759 ms *

And a second run, this time with port 8080:

    # tcptraceroute -n 88.191.132.173 8080
    Tracing the path to 88.191.132.173 on TCP port 8080 (http-alt), 30 hops max
     1  41.231.22.225  31.161 ms  98.015 ms  21.613 ms
     2  88.191.132.173 [open]  5.668 ms  1.579 ms  5.020 ms

The difference is obvious: in the first case our packet needs 19 hops and more than 45 milliseconds to reach its destination whereas in the second case only 2 hops and not more than 5 milliseconds.

Let us look at the first traceroute result. Packets destinated to port 22 are not redirected to the Web proxy and take their normal path to the destination. We can notice a big time gap between hops 3 and 4 that we can interpret as the Mediterranean Sea being crossed by our packet.

Now the second traceroute. Here, _tcptraceroute_ thinks the packet reaches its destination only after the second hop: on the way to the destination, the packet is diverted by the router and the connection is opened by the interception device way before it reaches the actual destination. _tcptraceroute_ however does not know that it is not talking to the actual destination and thinks it reached it after only two hops. The much smaller round-trip time (5 milliseconds instead of 45) indicates that the interception machine is on our side of the Mediterranean Sea rather than in France.

In short, having two different outputs emphasizes the [traffic discrimination](https://en.wikipedia.org/wiki/Net_neutrality) performed on the network depending on the destination port.

# Experiment at home
This setup being an old technique, one GNU/Linux computer with two network interfaces and _squid_ is enough to perform similar interception. Let us assume that _eth0_ is connected to the internet and that the local network is on _wlan0_. In other words, packets towards the internet from the local network come in by _wlan0_ et go out through _eth0_.

First make sure the computer properly acts as a gateway for the local network (DHCP server and proper forwarding and firewall rules). Once computers on the local network can access the internet through the gateway, you can configure the HTTP interception.

The following configuration for squid (I used version 3.1) is enough:

    http_port 3128 intercept
    always_direct allow all
    icp_access deny all
    http_access allow all
    cache deny all
    forwarded_for transparent
    via off

Start squid and then add the following _iptables_ rule:

    iptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 80 -j REDIRECT --to-port 3128

That is all. HTTP requests from the LAN computers will be shown in squid's access log and users will not notice anything from their browser. It is then possible to increase the interference by, for instance, configuring squid to forbid some keywords.

As you see, not much is needed to become a dangerous censor and snooper.

Knowing that the ATI's NetCache appliances are old equipment, we can easily imagine that much more efficient and stealth [Deep Packet Inspection](https://en.wikipedia.org/wiki/Deep_packet_inspection) devices may be installed by now in Tunisia. The [worrying words of the Tunisian Minister of Justice](https://twitter.com/Dymaxion/status/347028123461767168) during the [closing session](https://www.youtube.com/watch?v=81vTzkGHSTE) of the Freedom (sic) Online Conference suggested that monitoring and censorship capabilities are still running. I hope to post a short article in a near future on this important topic.

I warmly thank all those who helped, ran and participated to the workshop at ATI.

"""]]
